# -*- coding: utf-8 -*-
"""FINAL PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZK6gwo1Ivq8rxjJ2M9RIBRoVPzMe78Un
"""

!pip install cod-api

#Call of Duty Match Tracker Final

!pip install cod-api

from cod_api import API, platforms
import matplotlib.pyplot as plt
from datetime import datetime
from collections import defaultdict

#My in game details
USERNAME = 'rogue#6357879'
PLATFORM = platforms.Battlenet
SSO_COOKIE = 'MjY4OTg3NjIwMzQ4NTIzNTIwMjoxNzUzMTU2MDU4MDAwOjE1YWQwYWNkMWEyNDIwZDFkY2FjMGNhMDdiYjA0MWRh'

#Put classes
class Match:
    def __init__(self, matchDate, matchKills, matchDeaths, matchAccuracy, matchWeapon):
        self.matchDate = matchDate
        self.matchKills = matchKills
        self.matchDeaths = matchDeaths
        self.matchAccuracy = matchAccuracy
        self.matchWeapon = matchWeapon

    def kdRatio(self):
        return round(self.matchKills / self.matchDeaths, 2) if self.matchDeaths else self.matchKills


class PlayerStats:
    def __init__(self):
        self.matchList = []

    def addMatch(self, newMatch):
        self.matchList.append(newMatch)

    def getAverageKD(self):
        if not self.matchList:
            return 0
        totalKD = sum(match.kdRatio() for match in self.matchList)
        return round(totalKD / len(self.matchList), 2)

    def getFavoriteWeapon(self):
        weaponCount = defaultdict(int)
        for match in self.matchList:
            weaponCount[match.matchWeapon] += 1
        return max(weaponCount, key=weaponCount.get) if weaponCount else "N/A"

    def getAverageAccuracy(self):
        if not self.matchList:
            return 0
        totalAccuracy = sum(match.matchAccuracy for match in self.matchList)
        return round(totalAccuracy / len(self.matchList), 2)

    def getKillsPerWeapon(self):
        weaponKills = defaultdict(int)
        for match in self.matchList:
            weaponKills[match.matchWeapon] += match.matchKills
        return weaponKills

    def showKDTrend(self):
        matchDates = [match.matchDate for match in self.matchList]
        kdValues = [match.kdRatio() for match in self.matchList]
        plt.plot(matchDates, kdValues, marker='o', color='#FF6F61', label='K/D Ratio')
        plt.title("K/D Ratio Over Time")
        plt.xlabel("Date")
        plt.ylabel("K/D Ratio")
        plt.grid(True)
        plt.legend()
        plt.tight_layout()
        plt.xticks(rotation=45)
        plt.show()

    def showAccuracyTrend(self):
        matchDates = [match.matchDate for match in self.matchList]
        accuracyValues = [match.matchAccuracy for match in self.matchList]
        plt.fill_between(matchDates, accuracyValues, color='#6B5B95', alpha=0.6, label='Accuracy')
        plt.title("Accuracy Over Time")
        plt.xlabel("Date")
        plt.ylabel("Accuracy (%)")
        plt.grid(True)
        plt.legend()
        plt.tight_layout()
        plt.xticks(rotation=45)
        plt.show()

    def showWeaponUsage(self):
        weaponKills = self.getKillsPerWeapon()
        weapons = list(weaponKills.keys())
        kills = list(weaponKills.values())
        colors = ['#88B04B', '#F7CAC9', '#92A8D1', '#955251', '#B565A7']
        plt.pie(kills, labels=weapons, autopct='%1.1f%%', colors=colors, startangle=140)
        plt.title("Kill Distribution by Weapon")
        plt.axis('equal')
        plt.tight_layout()
        plt.show()


#Main code

def main():
    api = API()
    api.login(SSO_COOKIE)
    print("Fetching data...")

    try:
        data = api.Warzone.fullData(PLATFORM, USERNAME)
        recentMatches = data.get('matches', [])[:20]  # Limit to 20 recent matches
    except Exception as e:
        print("⚠️ API may be down or account is private. Unable to fetch match data at this time.")
        print("Error details:", e)
        print("Note: The code is fully functional and will work once Activision's API is available again.")
        return

    playerStats = PlayerStats()
    for match in recentMatches:
        summary = match.get('playerStats', {})
        metadata = match.get('utcStartSeconds', None)

        if not metadata:
            continue

        matchDate = datetime.fromtimestamp(metadata)
        kills = summary.get('kills', 0)
        deaths = summary.get('deaths', 1)
        accuracy = summary.get('accuracy', 0)
        weapon = summary.get('mainWeapon', 'Unknown')

        playerStats.addMatch(Match(matchDate, kills, deaths, accuracy, weapon))

    print("Call of Duty Match Stats Tracker (Live Data)")
    print(f"Average K/D Ratio: {playerStats.getAverageKD()}")
    print(f"Favorite Weapon: {playerStats.getFavoriteWeapon()}")
    print(f"Average Accuracy: {playerStats.getAverageAccuracy()}%")

    playerStats.showKDTrend()
    playerStats.showAccuracyTrend()
    playerStats.showWeaponUsage()


if __name__ == "__main__":
    main()